package com.example.spring.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Component;
import org.springframework.web.reactive.function.BodyInserters;
import org.springframework.web.reactive.function.server.ServerRequest;
import org.springframework.web.reactive.function.server.ServerResponse;

import com.example.spring.dao.UserRepository;
import com.example.spring.model.User;

import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

@Component
public class UserHandler {

	@Autowired
	private final UserRepository repository;
	
	
//	public UserHandler(UserRepository repository) {
//		this.repository = repository;
//	}
	
	public Mono<ServerResponse> hello(ServerRequest req){
		return  ServerResponse.ok().contentType(MediaType.TEXT_PLAIN)
				.body(BodyInserters.fromObject("Hello World................123456" ));
	}
	
	public Mono<ServerResponse> registerUser(ServerRequest req){
		Mono<User> user=req.bodyToMono(User.class);
		
//		return ServerResponse.created(UriComponentsBuilder
//				.fromPath("/register").build().toUri())
//				.contentType(MediaType.APPLICATION_JSON)
//				.body(mono,User.class);
		return ServerResponse.ok().build(repository.saveUser(user));	
	}
	
	public Mono<ServerResponse> listUser(ServerRequest request) { 
		Flux<User> user = repository.findAllUser();
		return ServerResponse.ok().contentType(MediaType.APPLICATION_JSON).body(user, User.class);
	}
	
	public Mono<ServerResponse> getUser(ServerRequest request){
		String userId=request.pathVariable("userId");
		Mono<ServerResponse> notfound=ServerResponse.notFound().build();
		Mono<User> usermono=repository.findUserById(userId);
		
		return usermono
				.flatMap(user -> ServerResponse.ok().contentType(MediaType.APPLICATION_JSON).body(BodyInserters.fromObject(user)))
				.onErrorResume(null);
	}
}
